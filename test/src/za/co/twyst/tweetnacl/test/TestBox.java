package za.co.twyst.tweetnacl.test;

import android.test.AndroidTestCase;

import za.co.twyst.tweetnacl.TweetNaCl;

public class TestBox extends AndroidTestCase 
       { // CONSTANTS
	
         @SuppressWarnings("unused")
	     private static final String TAG = "TweetNaCl";
         
         private static final int[] CIPHERTEXT =  { 0x0f3,0x0ff,0x0c7,0x070,0x03f,0x094,0x000,0x0e5,
        	  	                                    0x02a,0x07d,0x0fb,0x04b,0x03d,0x033,0x005,0x0d9,
        	  	                                    0x08e,0x099,0x03b,0x09f,0x048,0x068,0x012,0x073,
        	  	                                    0x0c2,0x096,0x050,0x0ba,0x032,0x0fc,0x076,0x0ce,
        	  	                                    0x048,0x033,0x02e,0x0a7,0x016,0x04d,0x096,0x0a4,
        	  	                                    0x047,0x06f,0x0b8,0x0c5,0x031,0x0a1,0x018,0x06a,
        	  	                                    0x0c0,0x0df,0x0c1,0x07c,0x098,0x0dc,0x0e8,0x07b,
        	  	                                    0x04d,0x0a7,0x0f0,0x011,0x0ec,0x048,0x0c9,0x072,
        	  	                                    0x071,0x0d2,0x0c2,0x00f,0x09b,0x092,0x08f,0x0e2,
        	  	                                    0x027,0x00d,0x06f,0x0b8,0x063,0x0d5,0x017,0x038,
        	  	                                    0x0b4,0x08e,0x0ee,0x0e3,0x014,0x0a7,0x0cc,0x08a,
        	  	                                    0x0b9,0x032,0x016,0x045,0x048,0x0e5,0x026,0x0ae,
        	  	                                    0x090,0x022,0x043,0x068,0x051,0x07a,0x0cf,0x0ea,
        	  	                                    0x0bd,0x06b,0x0b3,0x073,0x02b,0x0c0,0x0e9,0x0da,
        	  	                                    0x099,0x083,0x02b,0x061,0x0ca,0x001,0x0b6,0x0de,
        	  	                                    0x056,0x024,0x04a,0x09e,0x088,0x0d5,0x0f9,0x0b3,
        	  	                                    0x079,0x073,0x0f6,0x022,0x0a4,0x03d,0x014,0x0a6,
        	  	                                    0x059,0x09b,0x01f,0x065,0x04c,0x0b4,0x05a,0x074,
        	  	                                    0x0e3,0x055,0x0a5
                                                  };

         private static final byte[] M = { (byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,
        	                               (byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,
        	                               (byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,
        	                               (byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,(byte) 0x00,
        	                               (byte) 0xbe,(byte) 0x07,(byte) 0x5f,(byte) 0xc5,(byte) 0x3c,(byte) 0x81,(byte) 0xf2,(byte) 0xd5,
        	                               (byte) 0xcf,(byte) 0x14,(byte) 0x13,(byte) 0x16,(byte) 0xeb,(byte) 0xeb,(byte) 0x0c,(byte) 0x7b,
        	                               (byte) 0x52,(byte) 0x28,(byte) 0xc5,(byte) 0x2a,(byte) 0x4c,(byte) 0x62,(byte) 0xcb,(byte) 0xd4,
        	                               (byte) 0x4b,(byte) 0x66,(byte) 0x84,(byte) 0x9b,(byte) 0x64,(byte) 0x24,(byte) 0x4f,(byte) 0xfc,
        	                               (byte) 0xe5,(byte) 0xec,(byte) 0xba,(byte) 0xaf,(byte) 0x33,(byte) 0xbd,(byte) 0x75,(byte) 0x1a,
        	                               (byte) 0x1a,(byte) 0xc7,(byte) 0x28,(byte) 0xd4,(byte) 0x5e,(byte) 0x6c,(byte) 0x61,(byte) 0x29,
        	                               (byte) 0x6c,(byte) 0xdc,(byte) 0x3c,(byte) 0x01,(byte) 0x23,(byte) 0x35,(byte) 0x61,(byte) 0xf4,
        	                               (byte) 0x1d,(byte) 0xb6,(byte) 0x6c,(byte) 0xce,(byte) 0x31,(byte) 0x4a,(byte) 0xdb,(byte) 0x31,
        	                               (byte) 0x0e,(byte) 0x3b,(byte) 0xe8,(byte) 0x25,(byte) 0x0c,(byte) 0x46,(byte) 0xf0,(byte) 0x6d,
        	                               (byte) 0xce,(byte) 0xea,(byte) 0x3a,(byte) 0x7f,(byte) 0xa1,(byte) 0x34,(byte) 0x80,(byte) 0x57,
        	                               (byte) 0xe2,(byte) 0xf6,(byte) 0x55,(byte) 0x6a,(byte) 0xd6,(byte) 0xb1,(byte) 0x31,(byte) 0x8a,
        	                               (byte) 0x02,(byte) 0x4a,(byte) 0x83,(byte) 0x8f,(byte) 0x21,(byte) 0xaf,(byte) 0x1f,(byte) 0xde,
        	                               (byte) 0x04,(byte) 0x89,(byte) 0x77,(byte) 0xeb,(byte) 0x48,(byte) 0xf5,(byte) 0x9f,(byte) 0xfd,
        	                               (byte) 0x49,(byte) 0x24,(byte) 0xca,(byte) 0x1c,(byte) 0x60,(byte) 0x90,(byte) 0x2e,(byte) 0x52,
        	                               (byte) 0xf0,(byte) 0xa0,(byte) 0x89,(byte) 0xbc,(byte) 0x76,(byte) 0x89,(byte) 0x70,(byte) 0x40,
        	                               (byte) 0xe0,(byte) 0x82,(byte) 0xf9,(byte) 0x37,(byte) 0x76,(byte) 0x38,(byte) 0x48,(byte) 0x64,
        	                               (byte) 0x5e,(byte) 0x07,(byte) 0x05
                                         };
         
         private static final byte[] NONCE = { (byte) 0x69,(byte) 0x69,(byte) 0x6e,(byte) 0xe9,(byte) 0x55,(byte) 0xb6,(byte) 0x2b,(byte) 0x73,
        	                                   (byte) 0xcd,(byte) 0x62,(byte) 0xbd,(byte) 0xa8,(byte) 0x75,(byte) 0xfc,(byte) 0x73,(byte) 0xd6,
        	                                   (byte) 0x82,(byte) 0x19,(byte) 0xe0,(byte) 0x03,(byte) 0x6b,(byte) 0x7a,(byte) 0x0b,(byte) 0x37
         	                             	};
         
         private static final byte[] BOBPK = { (byte) 0xde,(byte) 0x9e,(byte) 0xdb,(byte) 0x7d,(byte) 0x7b,(byte) 0x7d,(byte) 0xc1,(byte) 0xb4,
        			                           (byte) 0xd3,(byte) 0x5b,(byte) 0x61,(byte) 0xc2,(byte) 0xec,(byte) 0xe4,(byte) 0x35,(byte) 0x37,
        			                           (byte) 0x3f,(byte) 0x83,(byte) 0x43,(byte) 0xc8,(byte) 0x5b,(byte) 0x78,(byte) 0x67,(byte) 0x4d,
        			                           (byte) 0xad,(byte) 0xfc,(byte) 0x7e,(byte) 0x14,(byte) 0x6f,(byte) 0x88,(byte) 0x2b,(byte) 0x4f,
                                             };
         
         private static final byte[] ALICESK = { (byte) 0x77,(byte) 0x07,(byte) 0x6d,(byte) 0x0a,(byte) 0x73,(byte) 0x18,(byte) 0xa5,(byte) 0x7d,
        			                             (byte) 0x3c,(byte) 0x16,(byte) 0xc1,(byte) 0x72,(byte) 0x51,(byte) 0xb2,(byte) 0x66,(byte) 0x45,
        			                             (byte) 0xdf,(byte) 0x4c,(byte) 0x2f,(byte) 0x87,(byte) 0xeb,(byte) 0xc0,(byte) 0x99,(byte) 0x2a,
        			                             (byte) 0xb1,(byte) 0x77,(byte) 0xfb,(byte) 0xa5,(byte) 0x1d,(byte) 0xb9,(byte) 0x2c,(byte) 0x2a
        									  };
         
         // TEST VARIABLES
    
         private TweetNaCl tweetnacl;

         // SETUP/TEARDOWN

         @Override
         protected void setUp() throws Exception 
                   { tweetnacl = new TweetNaCl();
                   }

         @Override
         protected void tearDown() throws Exception 
                   { tweetnacl.release();
                   }

         // UNIT TESTS

         public void testBox() throws Exception
                { byte[] ciphertext = tweetnacl.cryptoBox(M,NONCE,BOBPK,ALICESK);
                
                  for (int i=0; i<CIPHERTEXT.length; i++)
                      { assertEquals("Invalid byte " + i,CIPHERTEXT[i],ciphertext[i+16] & 0x00ff);
                      }
                }
       }
